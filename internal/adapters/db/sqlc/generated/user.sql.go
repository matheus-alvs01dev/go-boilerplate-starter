// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, wallet)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Name   string
	Email  string
	Wallet decimal.Decimal
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.Email, arg.Wallet)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id,
    name,
    email,
    wallet,
    created_at,
    updated_at
FROM users
WHERE id = $1
  AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	Wallet    decimal.Decimal
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Wallet,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    name       = $1,
    email      = $2,
    wallet     = $3,
    updated_at = NOW()
WHERE id = $4
  AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Name   string
	Email  string
	Wallet decimal.Decimal
	ID     pgtype.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Wallet,
		arg.ID,
	)
	return err
}
